/*
 * Copyright (C) Niklaus F.Schen.
 */
import('file');
json = import('json');
sys = import('sys');
str = import('str');
mq = import('mq');
b = import('base64');

@load_conf()
{
    f = $File;
    f.open('./config.json', 'r');
    conf = _json.decode(f.read(f.size()));
    f.close();
    return conf;
}

@load_task(&tasks, path)
{
    files = _sys.lsdir(path);
    if (!files)
        return [];
    fi
    n = _sys.size(files);
    for (i = 0; i < n; ++i) {
        if (files[i][0] == '.')
            continue;
        fi
        if (_sys.isdir(path+'/'+files[i])) {
            _load_task(tasks, path+'/'+files[i]);
        } else if (_str.reg_equal('.*\.json$', files[i])) {
            f = $File;
            f.open(path+'/'+files[i], 'r');
            conf = _json.decode(f.read(f.size()));
            f.close();
            if (!conf || !(_sys.has(conf, 'period'))) continue; fi
            if (!(_sys.has(conf, 'data')))
                conf['data'] = [];
            fi
            conf['data']['PWD'] = path;
            conf['base'] = _sys.time();
            tasks[conf['name']] = conf;
        } fi
    }
    return tasks;
}

conf = load_conf();
for (i = 0; i < conf['concurrency']; ++i) {
    eval('worker.mln');
}

readyq = [];
runq = [];
procq = [];
logq = [];
tasks = [];
delta = 0;
load_task(tasks, conf['path']);

while (true) {
    runq = [];
    deps = [];
    n = sys.size(tasks);
    now = sys.time();
    for (i = 0; i < n; ++i) {
        next = sys.cron(tasks[i]['period'], tasks[i]['base']/60*60+sys.int(conf['delta_sec']));
        name = tasks[i]['name'];
        if (next <= now+delta+conf['delta_sec']+1 && !(sys.has(readyq, name)) && (!(sys.has(logq, name)) || logq[name] < next)) {
            logq[name] = next;
            readyq[name] = tasks[i];
        } fi
    }
    keys = sys.keys(readyq);
    n = sys.size(keys);
    for (i = 0; i < n; ++i) {
        if (sys.has(procq, keys[i]))
            continue;
        fi
        add = true;
        arr = readyq[keys[i]]['deps'];
        m = sys.size(arr);
        for (j = 0; j < m; ++j) {
            if (sys.has(readyq, arr[j]) || sys.has(procq, arr[j])) {
                add = false;
                break;
            } fi
        }
        if (add) {
            runq[keys[i]] = readyq[keys[i]];
            mq.send('msg', keys[i]+'-'+b.base64(str.replace(sys.merge(readyq[keys[i]]['data'], conf['data']), readyq[keys[i]]['cmd']), 'encode'));
        } fi
    }
    procq = sys.merge(procq, runq);
    readyq = sys.key_diff(readyq, runq);
    runq = [];
    for (i = 0; i < conf['concurrency']; ++i) {
        msg = mq.recv('ack', 1);
        if (msg != nil) {
            runq[msg] = 1;
            tasks[msg]['base'] = sys.time()+sys.int(conf['delta_sec']);
        } fi
    }
    procq = sys.key_diff(procq, runq);
    delta = sys.time() - now;
}
